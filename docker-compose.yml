# version: '3.8'

services:
  # Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ai-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - open-webui
      - api
    restart: unless-stopped
    networks:
      - ai-network


  # Open WebUI
  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: ai-webui
    ports:
      - "8080:8080"
    volumes:
      - open-webui-data:/app/backend/data
    environment:
      - OLLAMA_BASE_URL=http://ollama:11434
      - WEBUI_SECRET_KEY=${WEBUI_SECRET_KEY}
      - SCRF_TRUSTED_ORIGINS=http://localhost,http://ai-assistant.company.local
      - ENABLE_SIGNUP=true
      - DEFAULT_USER_ROLE=user
      - ENABLE_ADMIN_EXPORT=true
      - PDF_EXTRACT_IMAGES=true
    restart: unless-stopped
    networks:
      - ai-network

  # FastAPI Backend
  api:
    build: ./api
    container_name: ai-api
    ports:
      - "8000:8000"
    volumes:
      - ./api:/app
      - shared-data:/app/data
    environment:
      - OLLAMA_HOST=http://localhost:11434
      - CHROMA_HOST=chromadb
      - REDIS_HOST=redis
      - DATABASE_URL=${DATABASE_URL}
      - ORACLE_DSN=${ORACLE_DSN}
    depends_on:
      - chromadb
      - redis
    restart: unless-stopped
    networks:
      - ai-network

  # ChromaDB Vector Database
  chromadb:
    image: chromadb/chroma:latest
    container_name: ai-chromadb
    ports:
      - "8001:8000"
    volumes:
      - chroma-data:/chroma/chroma
    environment:
      - IS_PERSISTENT=TRUE
      - PERSIST_DIRECTORY=/chroma/chroma
      - ANONYMIZED_TELEMETRY=FALSE
    restart: unless-stopped
    networks:
      - ai-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - ai-network

  # postgres Database 
  postgres:
    image: postgres:16-alpine
    networks: 
      - ai-network
    restart: unless-stopped
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10

  # Ollama LLM Server
  ollama:
    image: ollama/ollama:0.11.1
    container_name: ollama
    restart: unless-stopped
    volumes:
      - ollama_models:/root/.ollama
    ports:
      - "11434:11434"
    environment:
      - OLLAMA_HOST=0.0.0.0
    networks:
      - ai-network
    # GPU configuration - comment out if no NVIDIA GPU available
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 60s

  # n8n Workflow Automation
  n8n:
    image: n8nio/n8n
    container_name: ai-n8n
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}

      - N8N_HOST=localhost
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://localhost:5678/
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - n8n-data:/home/node/.n8n
    networks:
      - ai-network

volumes:
  open-webui-data:
  chroma-data:
  redis-data:
  shared-data:
  ollama_models:
  n8n-data:
  postgres_storage:

networks:
  ai-network:
    driver: bridge